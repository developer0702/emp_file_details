package com.optum.ftps.ob.core.employer.details.validator;

import com.optum.ftps.ob.core.employer.details.constants.EmployerDetailsConstants;
import com.optum.ftps.ob.core.employer.details.constants.ErrorCodeConstants;
import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.model.v1.*;
import com.optum.ftps.ob.core.employer.details.util.StringUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

@Slf4j
@Component
@RequiredArgsConstructor
public class EmployerBankDetailsValidator {

    private static final String CONTEXT_VALIDATE = "validate()";

    public Set<Integer> validateEmployerBankDetails(UpdateEmpBankDetailsRequest request) throws ValidationException {
        sanitizeRequest(request);
        Set<Integer> errors = new TreeSet<>();

        if (!areRequiredFieldsPresent(request)) {
            log.error("{} - Required fields missing", CONTEXT_VALIDATE);
            errors.add(ErrorCodeConstants.REQUIRED_FIELDS_MISSING);
        }
        if (!isValidFormat(request)) {
            log.error("{} - Invalid format", CONTEXT_VALIDATE);
            errors.add(ErrorCodeConstants.INCORRECT_FORMAT);
        }
        return errors;
    }

    private boolean areRequiredFieldsPresent(UpdateEmpBankDetailsRequest request) {
        if (StringUtil.isEmpty(request.getRequestUserId()) ||
            StringUtil.isEmpty(request.getSourceSystemId()) ||
            StringUtil.isEmpty(request.getRequestId()) ||
            request.getEmployerBankDetail() == null ||
            StringUtil.isEmpty(request.getEmployerBankDetail().getEmployerGroupId())) {
            return false;
        }
        return request.getEmployerBankDetail().getContributionBankAccounts().stream()
                .anyMatch(account -> account.getBankAccountIdentifier() != null &&
                        account.getBankAccountIdentifier().getBankAccountNumber() != null &&
                        account.getBankAccountIdentifier().getBankRoutingNumber() != null &&
                        account.getBankAccountTypeCode() != null &&
                        account.getBankAccountTypeCode().getCode() != null);
    }

    private boolean isValidFormat(UpdateEmpBankDetailsRequest request) throws ValidationException {
        List<ContributionBankAccount> accounts = request.getEmployerBankDetail().getContributionBankAccounts();
        if (accounts.isEmpty() || accounts.size() > 20) {
            throw new ValidationException(String.valueOf(EmployerDetailsConstants.MAX_CONTRIBUTION_ACCOUNT_ALLOWED));
        }
        return validateRequestFields(request) && validateEmployerGroupId(request) && validateAccounts(accounts);
    }

    private boolean validateRequestFields(UpdateEmpBankDetailsRequest request) {
        return isValidLength(request.getRequestId(), EmployerDetailsConstants.BNK_REQUESTID_LENGTH, "RequestId") &&
               isValidLength(request.getRequestUserId(), EmployerDetailsConstants.BNK_REQ_USERID_LENGTH, "RequestUserId") &&
               isValidLength(request.getSourceSystemId(), EmployerDetailsConstants.BNK_SRC_SYS_ID_LENGTH, "SourceSystemId");
    }

    private boolean validateEmployerGroupId(UpdateEmpBankDetailsRequest request) {
        String employerGroupId = request.getEmployerBankDetail().getEmployerGroupId();
        return employerGroupId.length() <= EmployerDetailsConstants.EMP_GROUP_ID_LENGTH &&
               StringUtil.isAlphanumericAndSpecial(employerGroupId);
    }

    private boolean validateAccounts(List<ContributionBankAccount> accounts) throws ValidationException {
        return accounts.stream().allMatch(this::validateAccount);
    }

    private boolean validateAccount(ContributionBankAccount account) {
        return validateBankAccountIdentifier(account) && validateBankDetails(account) && validateBankOperation(account);
    }

    private boolean validateBankAccountIdentifier(ContributionBankAccount account) {
        String routingNumber = account.getBankAccountIdentifier().getBankRoutingNumber();
        String accountNumber = account.getBankAccountIdentifier().getBankAccountNumber();
        return isValidNumericLength(routingNumber, EmployerDetailsConstants.BNK_RTR_NO_LENGTH, "BankRoutingNumber") &&
               isValidNumericLength(accountNumber, EmployerDetailsConstants.BNK_ACCT_NO_LENGTH, "BankAccountNumber");
    }

    private boolean validateBankDetails(ContributionBankAccount account) {
        return isValidLength(account.getBankName(), EmployerDetailsConstants.BNK_NAME_LENGTH, "BankName") &&
               isValidCode(account.getBankAccountTypeCode().getCode(), "SC", "BankAccountTypeCode") &&
               isValidCode(account.getBankAccountStatus().getCode(), "AI", "BankAccountStatus");
    }

    private boolean validateBankOperation(ContributionBankAccount account) {
        String operation = account.getBankAccountOperation().trim();
        if (!operation.equalsIgnoreCase(EmployerDetailsConstants.BNK_ACCT_OPERATION_CD_ADD) &&
            !operation.equalsIgnoreCase(EmployerDetailsConstants.BNK_ACCT_OPERATION_CD_UPDATE)) {
            throw new ValidationException(EmployerDetailsConstants.BNK_ACCNT_OPERATION_CD);
        }
        if (operation.equalsIgnoreCase(EmployerDetailsConstants.BNK_ACCT_OPERATION_CD_ADD) &&
            account.getBankSequenceNumber() != null && !account.getBankSequenceNumber().trim().isEmpty()) {
            throw new ValidationException(EmployerDetailsConstants.CUST_FUND_ID_ERROR);
        }
        return true;
    }

    private boolean isValidLength(String field, int maxLength, String fieldName) {
        if (field != null && field.trim().length() > maxLength) {
            log.error("{} exceeds max length {}: {}", fieldName, maxLength, field);
            return false;
        }
        return true;
    }

    private boolean isValidNumericLength(String field, int length, String fieldName) {
        if (field.length() != length || !StringUtil.isNumeric(field)) {
            log.error("{} must be exactly {} digits: {}", fieldName, length, field);
            return false;
        }
        return true;
    }

    private boolean isValidCode(String code, String validValues, String fieldName) {
        if (!validValues.contains(code.trim().toUpperCase())) {
            log.error("Invalid {}: {}", fieldName, code);
            return false;
        }
        return true;
    }

    private void sanitizeRequest(UpdateEmpBankDetailsRequest request) {
        request.setRequestId(StringUtil.sanitize(request.getRequestId()));
        request.setRequestUserId(StringUtil.sanitize(request.getRequestUserId()));
        request.setSourceSystemId(StringUtil.sanitize(request.getSourceSystemId()));
        request.getEmployerBankDetail().setEmployerGroupId(
                StringUtil.sanitize(request.getEmployerBankDetail().getEmployerGroupId()));
        request.getEmployerBankDetail().getContributionBankAccounts().forEach(account -> {
            account.getBankAccountIdentifier().setBankAccountNumber(
                    StringUtil.sanitize(account.getBankAccountIdentifier().getBankAccountNumber()));
            account.getBankAccountIdentifier().setBankRoutingNumber(
                    StringUtil.sanitize(account.getBankAccountIdentifier().getBankRoutingNumber()));
            account.setBankName(StringUtil.sanitize(account.getBankName()));
        });
    }
}
