package com.optum.ftps.ob.core.employer.details.validator;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountIdentifier;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountStatus;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountTypeCode;
import com.optum.ftps.ob.core.employer.details.model.v1.ContributionBankAccount;
import com.optum.ftps.ob.core.employer.details.model.v1.EmployerBankDetail;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsRequest;

import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.Set;

public class EmployerBankDetailsValidatorTest {

    private final EmployerBankDetailsValidator validator = new EmployerBankDetailsValidator();

    @Test
    void testValidateEmployerBankDetails_validRequest() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        request.setRequestId("-4123525199855273062");
        request.setRequestUserId("prajula1");
        request.setSourceSystemId("4");

        EmployerBankDetail employerBankDetail = new EmployerBankDetail();
        employerBankDetail.setEmployerGroupId("TST_EMP1001");

        ContributionBankAccount contributionBankAccount = new ContributionBankAccount();
        BankAccountIdentifier bankAccountIdentifier = new BankAccountIdentifier();
        bankAccountIdentifier.setBankAccountNumber("32325435435465456");
        bankAccountIdentifier.setBankRoutingNumber("041215032");
        contributionBankAccount.setBankAccountIdentifier(bankAccountIdentifier);
        contributionBankAccount.setBankAccountTypeCode(new BankAccountTypeCode("C", "Checking"));
        contributionBankAccount.setBankName("PUNJAB NATIONAL BANK");
        contributionBankAccount.setBankAccountStatus(new BankAccountStatus("A", "Active"));
        contributionBankAccount.setBankSequenceNumber("14");
        contributionBankAccount.setBankAccountNickName("HUNTINGTON NATIONAL BANK 5456");
        contributionBankAccount.setBankAccountOperation("Update");

        employerBankDetail.setContributionBankAccounts(
                Collections.singletonList(contributionBankAccount));
        request.setEmployerBankDetail(employerBankDetail);

        Set<Integer> errors = validator.validateEmployerBankDetails(request);

        assertTrue(errors.isEmpty());
    }

    @Test
    void testValidateEmployerBankDetails_invalidRequest() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        request.setRequestId("invalidRequestIdThatIsWayTooLongForTheSystemToHandleProperly");
        request.setRequestUserId("invalidUserIdThatIsWayTooLongForTheSystemToHandleProperly");
        request.setSourceSystemId("invalidSourceId");

        EmployerBankDetail employerBankDetail = new EmployerBankDetail();
        employerBankDetail.setEmployerGroupId("invalidGroupIdThatIsWayTooLong");

        ContributionBankAccount contributionBankAccount = new ContributionBankAccount();
        BankAccountIdentifier bankAccountIdentifier = new BankAccountIdentifier();
        bankAccountIdentifier.setBankAccountNumber("invalidAccountNumberThatIsWayTooLong");
        bankAccountIdentifier.setBankRoutingNumber("invalidRoutingNumber");
        contributionBankAccount.setBankAccountIdentifier(bankAccountIdentifier);
        contributionBankAccount.setBankAccountTypeCode(new BankAccountTypeCode("X", "InvalidType"));
        contributionBankAccount.setBankAccountStatus(new BankAccountStatus("X", "InvalidStatus"));
        contributionBankAccount.setBankAccountOperation("INVALID");

        employerBankDetail.setContributionBankAccounts(
                Collections.singletonList(contributionBankAccount));
        request.setEmployerBankDetail(employerBankDetail);

        Set<Integer> errors = validator.validateEmployerBankDetails(request);

        assertFalse(errors.isEmpty());
    }
}
