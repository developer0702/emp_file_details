package com.optum.ftps.ob.core.employer.details.validator;

import com.optum.ftps.ob.core.employer.details.constants.ErrorCodeConstants;
import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.model.v1.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import java.util.Collections;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EmployerBankDetailsValidatorTest {

    @InjectMocks
    private EmployerBankDetailsValidator validator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testValidateEmployerBankDetails_RequiredFieldsMissing() {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        request.setEmployerBankDetail(new EmployerBankDetail()); // Ensure EmployerBankDetail is initialized
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertEquals(Set.of(ErrorCodeConstants.REQUIRED_FIELDS_MISSING), errors, "Unexpected error codes found");
    }

    @Test
    void testValidateEmployerBankDetails_ValidRequest() {
        UpdateEmpBankDetailsRequest request = createValidRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertTrue(errors.isEmpty());
    }

    @Test
    void testValidateEmployerBankDetails_InvalidFormat() {
        UpdateEmpBankDetailsRequest request = createInvalidRequest();
        assertThrows(ValidationException.class, () -> validator.validateEmployerBankDetails(request));
    }

    private UpdateEmpBankDetailsRequest createValidRequest() {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        request.setRequestId("123456");
        request.setRequestUserId("user123");
        request.setSourceSystemId("SYS001");

        EmployerBankDetail employerBankDetail = new EmployerBankDetail();
        employerBankDetail.setEmployerGroupId("EMP123");

        ContributionBankAccount account = new ContributionBankAccount();
        BankAccountIdentifier identifier = new BankAccountIdentifier();
        identifier.setBankAccountNumber("1234567890");
        identifier.setBankRoutingNumber("987654321");
        account.setBankAccountIdentifier(identifier);
        account.setBankName("Test Bank");

        BankAccountTypeCode bankAccountTypeCode = new BankAccountTypeCode();
        bankAccountTypeCode.setCode("S");
        bankAccountTypeCode.setCodeName("Savings");
        account.setBankAccountTypeCode(bankAccountTypeCode);
        
        BankAccountStatus bankAccountStatus = new BankAccountStatus();
        bankAccountStatus.setCode("A");
        bankAccountStatus.setCodeName("ACTIVE");
        account.setBankAccountStatus(bankAccountStatus);
        
        account.setBankAccountOperation("ADD");

        employerBankDetail.setContributionBankAccounts(Collections.singletonList(account));
        request.setEmployerBankDetail(employerBankDetail);
        return request;
    }

    private UpdateEmpBankDetailsRequest createInvalidRequest() {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        request.setEmployerBankDetail(new EmployerBankDetail()); // Ensure EmployerBankDetail is initialized
        return request;
    }
}
