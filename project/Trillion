
public ResponseEntity<UpdateEmpBankDetailsResponse> updEmployerBankDetails(
        @Valid @RequestBody UpdateEmpBankDetailsRequest request) throws ValidationException {
    
    log.debug("Received request to update employer bank details: {}", request);

    // Validate request
    Set<Integer> errors = employerBankDetailsValidator.validateEmployerBankDetails(request);
    if (!errors.isEmpty()) {
        log.error("Validation failed for update employer bank details request: {}", errors);
        Status status = new Status("400", "ERROR", "Validation failed: " + errors);
        UpdateEmpBankDetailsResponse errorResponse = UpdateEmpBankDetailsResponse.builder()
                .status(status)
                .build();
        return ResponseEntity.badRequest().body(errorResponse);
    }

    try {
        // Mapping request
        var requestDTO = employerBankDetailsMapper.map(request);

        // Calling service
        var responseDTO = employerBankDetailsService.updateEmployerBankDetails(requestDTO);

        // Mapping response
        var response = employerBankDetailsResponseMapper.map(responseDTO);

        log.debug("Employer bank details updated successfully: {}", responseDTO);
        return ResponseEntity.ok(response);

    } catch (ValidationException e) {
        log.error("Validation error occurred: {}", e.getMessage(), e);
        Status status = new Status("400", "ERROR", "Validation error: " + e.getMessage());
        return ResponseEntity.badRequest()
                .body(UpdateEmpBankDetailsResponse.builder().status(status).build());
    } catch (EntityNotFoundException e) {
        log.error("Employer not found: {}", e.getMessage(), e);
        Status status = new Status("404", "ERROR", "Employer Not Found");
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(UpdateEmpBankDetailsResponse.builder().status(status).build());
    } catch (Exception e) {
        log.error("Unexpected error occurred while updating employer bank details: {}", e.getMessage(), e);
        Status status = new Status("500", "ERROR", "Internal Server Error");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(UpdateEmpBankDetailsResponse.builder().status(status).build());
    }
}



******************************************************************************************

import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.mapper.EmployerBankDetailsMapper;
import com.optum.ftps.ob.core.employer.details.mapper.EmployerBankDetailsResponseMapper;
import com.optum.ftps.ob.core.employer.details.model.v1.Status;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsRequest;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsResponse;
import com.optum.ftps.ob.core.employer.details.service.EmployerBankDetailsService;
import com.optum.ftps.ob.core.employer.details.validator.EmployerBankDetailsValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class EmployerBankDetailsControllerTest {

    @Mock private EmployerBankDetailsService employerBankDetailsService;
    @Mock private EmployerBankDetailsValidator employerBankDetailsValidator;
    @Mock private EmployerBankDetailsMapper employerBankDetailsMapper;
    @Mock private EmployerBankDetailsResponseMapper employerBankDetailsResponseMapper;

    @InjectMocks private EmployerBankDetailsController employerBankDetailsController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void updEmployerBankDetails_validRequest_returnsOk() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        UpdateEmpBankDetailsResponse response = new UpdateEmpBankDetailsResponse();
        response.setStatus(new Status("200", "Success"));

        when(employerBankDetailsValidator.validateEmployerBankDetails(request))
                .thenReturn(Collections.emptySet());
        when(employerBankDetailsMapper.map(request)).thenReturn(null);
        when(employerBankDetailsService.updateEmployerBankDetails(null)).thenReturn(null);
        when(employerBankDetailsResponseMapper.map(null)).thenReturn(response);

        ResponseEntity<UpdateEmpBankDetailsResponse> result =
                employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals(response, result.getBody());
    }

    @Test
    void updEmployerBankDetails_invalidRequest_returnsBadRequest() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        Set<Integer> errors = Set.of(1);
        when(employerBankDetailsValidator.validateEmployerBankDetails(request)).thenReturn(errors);

        ResponseEntity<UpdateEmpBankDetailsResponse> result =
                employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertEquals("400", result.getBody().getStatus().getStatusCode());
    }

    @Test
    void updEmployerBankDetails_serviceThrowsException_returnsInternalServerError()
            throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        when(employerBankDetailsValidator.validateEmployerBankDetails(request))
                .thenReturn(Collections.emptySet());
        when(employerBankDetailsMapper.map(request)).thenReturn(null);
        when(employerBankDetailsService.updateEmployerBankDetails(null))
                .thenThrow(new RuntimeException());

        ResponseEntity<UpdateEmpBankDetailsResponse> result =
                employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, result.getStatusCode());
        assertEquals("500", result.getBody().getStatus().getStatusCode());
    }
}
