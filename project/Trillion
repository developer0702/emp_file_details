{
  "employerBankDetail": {
    "employerGroupId": "TST_EMP1001",
    "contributionBankAccounts": [
      {
        "bankAccountIdentifier": {
          "bankAccountNumber": "32325435435465456",
          "bankRoutingNumber": "041215032"
        },
        "bankAccountTypeCode": {
          "code": "C",
          "codeName": "Checking"
        },
        "bankName": "PUNJAB NATIONAL BANK",
        "bankAccountStatus": {
          "code": "A",
          "codeName": "Active"
        },
        "bankSequenceNumber": "14",
        "bankAccountNickName": "HUNTINGTON NATIONAL BANK 5456",
        "bankAccountOperation": "Update"
      }
    ]
  },
  "requestId": "-4123525199855273062",
  "requestUserId": "prajula1",
  "sourceSystemId": "4"
}


package com.optum.ftps.ob.core.employer.details.controller;

import com.optum.ftps.ob.core.employer.details.dtos.EmployerBankDetailsRequestDTO;
import com.optum.ftps.ob.core.employer.details.dtos.EmployerBankDetailsResponseDTO;
import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.mapper.EmployerBankDetailsMapper;
import com.optum.ftps.ob.core.employer.details.mapper.EmployerBankDetailsResponseMapper;
import com.optum.ftps.ob.core.employer.details.model.v1.Status;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsRequest;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsResponse;
import com.optum.ftps.ob.core.employer.details.service.EmployerBankDetailsService;
import com.optum.ftps.ob.core.employer.details.validator.EmployerBankDetailsValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class EmployerBankDetailsControllerTest {

    @Mock
    private EmployerBankDetailsService employerBankDetailsService;

    @Mock
    private EmployerBankDetailsValidator employerBankDetailsValidator;

    @Mock
    private EmployerBankDetailsMapper employerBankDetailsMapper;

    @Mock
    private EmployerBankDetailsResponseMapper employerBankDetailsResponseMapper;

    @InjectMocks
    private EmployerBankDetailsController employerBankDetailsController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void updEmployerBankDetails_validRequest_returnsOk() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        EmployerBankDetailsRequestDTO requestDTO = new EmployerBankDetailsRequestDTO();
        EmployerBankDetailsResponseDTO responseDTO = new EmployerBankDetailsResponseDTO();
        UpdateEmpBankDetailsResponse response = new UpdateEmpBankDetailsResponse();

        when(employerBankDetailsValidator.validateEmployerBankDetails(request)).thenReturn(Collections.emptySet());
        when(employerBankDetailsMapper.map(Mockito.any(UpdateEmpBankDetailsRequest.class))).thenReturn(requestDTO);
        when(employerBankDetailsService.updateEmployerBankDetails(Mockito.any())).thenReturn(responseDTO);
        when(employerBankDetailsResponseMapper.map(responseDTO)).thenReturn(response);

        ResponseEntity<UpdateEmpBankDetailsResponse> result = employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals(response, result.getBody());
    }

    @Test
    void updEmployerBankDetails_invalidRequest_returnsBadRequest() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        Set<Integer> errors = Set.of(1);
        Status status = new Status();
        status.setStatusCode("400");
        status.setSeverity("ERROR");
        status.setStatusDescription("Validation failed: " + errors);
        UpdateEmpBankDetailsResponse expectedResponse = new UpdateEmpBankDetailsResponse();
        expectedResponse.setStatus(status);

        when(employerBankDetailsValidator.validateEmployerBankDetails(request)).thenReturn(errors);

        ResponseEntity<UpdateEmpBankDetailsResponse> result = employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertEquals(expectedResponse.getStatus().getStatusCode(), result.getBody().getStatus().getStatusCode());
    }

    @Test
    void updEmployerBankDetails_serviceThrowsException_returnsInternalServerError() throws ValidationException {
        UpdateEmpBankDetailsRequest request = new UpdateEmpBankDetailsRequest();
        EmployerBankDetailsRequestDTO requestDTO = new EmployerBankDetailsRequestDTO();
        Status status = new Status();
        status.setStatusCode("500");
        status.setSeverity("ERROR");
        status.setStatusDescription("Unexpected server error");
        UpdateEmpBankDetailsResponse expectedResponse = new UpdateEmpBankDetailsResponse();
        expectedResponse.setStatus(status);

        when(employerBankDetailsValidator.validateEmployerBankDetails(request)).thenReturn(Collections.emptySet());
        when(employerBankDetailsMapper.map(request)).thenReturn(requestDTO);
        when(employerBankDetailsService.updateEmployerBankDetails(requestDTO)).thenThrow(new RuntimeException());

        ResponseEntity<UpdateEmpBankDetailsResponse> result = employerBankDetailsController.updEmployerBankDetails(request);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, result.getStatusCode());
        assertEquals(expectedResponse.getStatus().getStatusCode(), result.getBody().getStatus().getStatusCode());
    }
}
