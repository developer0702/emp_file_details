package com.optum.ftps.ob.core.employer.details.service.impl;

import com.optum.ftps.ob.core.employer.details.constants.BankAccountConstants;
import com.optum.ftps.ob.core.employer.details.dtos.*;
import com.optum.ftps.ob.core.employer.details.dtos.bankaccount.BankAccountDTO;
import com.optum.ftps.ob.core.employer.details.dtos.bankaccount.BankAccountResponse;
import com.optum.ftps.ob.core.employer.details.dtos.bankaccount.BankAccountResponseDTO;
import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.helper.BankAccountClient;
import com.optum.ftps.ob.core.employer.details.service.EmployerBankDetailsService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmployerBankDetailsServiceImpl implements EmployerBankDetailsService {

    private final BankAccountClient bankAccountClient;

    @Override
    public Mono<EmployerBankDetailsResponseDTO> updateEmployerBankDetails(
            EmployerBankDetailsResponseDTO employerBankDetailDTO) {

        String employerGroupId = employerBankDetailDTO.getEmployerBankDetail().getEmployerGroupId();
        String sequenceNo = employerBankDetailDTO.getEmployerBankDetail()
                .getContributionBankAccounts().getFirst().getBankSequenceNumber();

        if (employerGroupId == null || employerGroupId.trim().isEmpty() ||
                sequenceNo == null || sequenceNo.trim().isEmpty()) {
            return Mono.error(new ValidationException(
                    "employerGroupId and sequenceNo not valid. Please provide valid IDs."));
        }

        log.debug("Fetching bank account details for Group ID: {} and Sequence No: {}", employerGroupId, sequenceNo);

        return bankAccountClient.callGetBankAccountInfoApi(employerGroupId, Long.valueOf(sequenceNo))
                .flatMap(bankAccountResponse -> {
                    if (bankAccountResponse == null || bankAccountResponse.getData() == null) {
                        return Mono.error(new ValidationException("Bank account data is missing from the response"));
                    }

                    BankAccountDTO updatedBankAccount = updateBankDetails(employerBankDetailDTO, bankAccountResponse.getData());
                    return bankAccountClient.updateBankAccountResponse(updatedBankAccount, employerGroupId, Long.valueOf(sequenceNo))
                            .flatMap(bankAccountResponseDTO -> getEmployerBankDetailsResponseDTO(employerBankDetailDTO, bankAccountResponseDTO, employerGroupId));
                })
                .onErrorResume(e -> {
                    log.error("Error updating employer bank details", e);
                    return Mono.error(new RuntimeException("Service error: Unable to update bank details"));
                });
    }

    private BankAccountDTO updateBankDetails(EmployerBankDetailsResponseDTO employerBankDetailsResponseDTO, BankAccountDTO bankAccountDTO) {
        ContributionBankAccountDTO contributionBankAccountDTO = employerBankDetailsResponseDTO.getEmployerBankDetail()
                .getContributionBankAccounts().getFirst();

        bankAccountDTO.setBankName(contributionBankAccountDTO.getBankName());
        bankAccountDTO.setNickName(contributionBankAccountDTO.getBankAccountNickName());
        bankAccountDTO.setAccountNumber(contributionBankAccountDTO.getBankAccountIdentifier().getBankAccountNumber());
        bankAccountDTO.setRoutingNumber(contributionBankAccountDTO.getBankAccountIdentifier().getBankRoutingNumber());
        bankAccountDTO.setAccountStatus(contributionBankAccountDTO.getBankAccountStatus().getCodeName());
        bankAccountDTO.setUsage(BankAccountConstants.HSA_FUNDING);
        bankAccountDTO.setSource(BankAccountConstants.EUREKA);
        bankAccountDTO.setCorrelationId("1234");
        bankAccountDTO.setAccountType(contributionBankAccountDTO.getBankAccountTypeCode().getCode());

        return bankAccountDTO;
    }

    private Mono<EmployerBankDetailsResponseDTO> getEmployerBankDetailsResponseDTO(
            EmployerBankDetailsResponseDTO employerBankDetailsResponseDTO,
            BankAccountResponseDTO bankAccountResponseDTO,
            String employerGroupId) {

        if (bankAccountResponseDTO != null &&
                BankAccountConstants.SUCCESS.equalsIgnoreCase(bankAccountResponseDTO.getStatus()) &&
                bankAccountResponseDTO.getData() > 0) {

            return bankAccountClient.getBankAccountInfoFromBankService(employerGroupId, bankAccountResponseDTO.getData())
                    .map(bankAccountResponse -> {
                        if (bankAccountResponse == null || bankAccountResponse.getData() == null) {
                            return null;
                        }

                        EmployerBankDetailDTO employerBankDetailDTO = getEmployerBankDetailDTO(
                                bankAccountResponse.getData(), employerBankDetailsResponseDTO);
                        employerBankDetailsResponseDTO.setEmployerBankDetail(employerBankDetailDTO);
                        return employerBankDetailsResponseDTO;
                    });
        }

        return Mono.empty();
    }

    private EmployerBankDetailDTO getEmployerBankDetailDTO(
            BankAccountDTO bankAccountResponse, EmployerBankDetailsResponseDTO employerBankDetailsResponseDTO) {
        
        ContributionBankAccountDTO contributionBankAccountDTO = new ContributionBankAccountDTO();
        BankAccountIdentifierDTO bankAccountIdentifierDTO = new BankAccountIdentifierDTO();
        
        bankAccountIdentifierDTO.setBankAccountNumber(bankAccountResponse.getAccountNumber());
        bankAccountIdentifierDTO.setBankRoutingNumber(bankAccountResponse.getRoutingNumber());

        contributionBankAccountDTO.setBankAccountIdentifier(bankAccountIdentifierDTO);
        contributionBankAccountDTO.setBankAccountNickName(bankAccountResponse.getNickName());
        contributionBankAccountDTO.setBankName(bankAccountResponse.getBankName());
        contributionBankAccountDTO.setBankSequenceNumber(String.valueOf(bankAccountResponse.getId()));

        contributionBankAccountDTO.setBankAccountTypeCode(new BankAccountTypeCodeDTO(bankAccountResponse.getAccountType(), "Savings"));
        contributionBankAccountDTO.setBankAccountStatus(new BankAccountStatusDTO(bankAccountResponse.getAccountStatus(), "Active"));
        contributionBankAccountDTO.setBankAccountOperation("ADD");

        EmployerBankDetailDTO employerBankDetailDTO = new EmployerBankDetailDTO();
        employerBankDetailDTO.setContributionBankAccounts(List.of(contributionBankAccountDTO));
        
        return employerBankDetailDTO;
    }
}
