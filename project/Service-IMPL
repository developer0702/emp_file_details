package com.optum.ftps.ob.core.employer.details.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.optum.ftps.ob.core.employer.details.dtos.*;
import com.optum.ftps.ob.core.employer.details.dtos.bankaccount.*;
import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.helper.BankAccountClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;

import java.util.List;

@ExtendWith(MockitoExtension.class)
class EmployerBankDetailsServiceImplTest {

    @Mock
    private BankAccountClient bankAccountClient;

    @InjectMocks
    private EmployerBankDetailsServiceImpl employerBankDetailsService;

    private EmployerBankDetailsResponseDTO requestDTO;
    private BankAccountResponse mockBankAccountResponse;
    private BankAccountResponseDTO mockBankAccountResponseDTO;

    @BeforeEach
    void setUp() {
        ContributionBankAccountDTO contributionBankAccount = new ContributionBankAccountDTO();
        contributionBankAccount.setBankSequenceNumber("123");
        contributionBankAccount.setBankName("Test Bank");

        EmployerBankDetailDTO employerBankDetailDTO = new EmployerBankDetailDTO();
        employerBankDetailDTO.setEmployerGroupId("EMP123");
        employerBankDetailDTO.setContributionBankAccounts(List.of(contributionBankAccount));

        requestDTO = new EmployerBankDetailsResponseDTO();
        requestDTO.setEmployerBankDetail(employerBankDetailDTO);

        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setAccountNumber("123456789");
        bankAccountDTO.setRoutingNumber("987654321");
        bankAccountDTO.setNickName("Test Account");
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setAccountType("SAVINGS");
        bankAccountDTO.setAccountStatus("ACTIVE");

        mockBankAccountResponse = new BankAccountResponse();
        mockBankAccountResponse.setData(bankAccountDTO);

        mockBankAccountResponseDTO = new BankAccountResponseDTO();
        mockBankAccountResponseDTO.setStatus("SUCCESS");
        mockBankAccountResponseDTO.setData(1L);
    }

    @Test
    void updateEmployerBankDetails_successfulResponse_returnsUpdatedResponse() {
        when(bankAccountClient.callGetBankAccountInfoApi(anyString(), anyLong()))
                .thenReturn(Mono.just(mockBankAccountResponse));

        when(bankAccountClient.updateBankAccountResponse(any(), anyString(), anyLong()))
                .thenReturn(mockBankAccountResponseDTO);

        EmployerBankDetailsResponseDTO response = employerBankDetailsService.updateEmployerBankDetails(requestDTO);

        assertNotNull(response);
        assertNotNull(response.getEmployerBankDetail());
        assertEquals("Test Bank", response.getEmployerBankDetail().getContributionBankAccounts().getFirst().getBankName());

        verify(bankAccountClient, times(1)).callGetBankAccountInfoApi(anyString(), anyLong());
        verify(bankAccountClient, times(1)).updateBankAccountResponse(any(), anyString(), anyLong());
    }

    @Test
    void updateEmployerBankDetails_invalidInput_throwsValidationException() {
        requestDTO.getEmployerBankDetail().setEmployerGroupId("");

        assertThrows(ValidationException.class, () -> employerBankDetailsService.updateEmployerBankDetails(requestDTO));
    }

    @Test
    void updateEmployerBankDetails_apiCallFails_throwsRuntimeException() {
        when(bankAccountClient.callGetBankAccountInfoApi(anyString(), anyLong()))
                .thenReturn(Mono.error(new RuntimeException("Service error")));

        assertThrows(RuntimeException.class, () -> employerBankDetailsService.updateEmployerBankDetails(requestDTO));
    }
}
