package com.optum.ftps.ob.core.employer.details.resolver;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.optum.ftps.ob.core.employer.details.dto.*;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

class EmployerContributionHelperTest {

    @Mock
    private BankAccountDTO bankAccountDTO;

    @Mock
    private EmployerBankDetailsResponseDTO employerBankDetailsResponseDTO;

    @Mock
    private EmployerBankDetailDTO employerBankDetailDTO;

    @Mock
    private ContributionBankAccountDTO contributionBankAccountDTO;

    @Mock
    private BankAccountTypeCodeDTO bankAccountTypeCodeDTO;

    @Mock
    private BankAccountStatusDTO bankAccountStatusDTO;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        when(bankAccountDTO.getNickName()).thenReturn("Test Nickname");
        when(bankAccountDTO.getBankName()).thenReturn("Test Bank");
        when(bankAccountDTO.getId()).thenReturn(123L);
        when(bankAccountDTO.getAccountNumber()).thenReturn("123456789");
        when(bankAccountDTO.getRoutingNumber()).thenReturn("987654321");
        when(bankAccountDTO.getAccountStatus()).thenReturn("Active");
        when(bankAccountDTO.getAccountType()).thenReturn("Checking");

        when(employerBankDetailsResponseDTO.getEmployerBankDetail()).thenReturn(employerBankDetailDTO);
        when(employerBankDetailDTO.getContributionBankAccounts()).thenReturn(Collections.singletonList(contributionBankAccountDTO));
        when(contributionBankAccountDTO.getBankAccountTypeCode()).thenReturn(bankAccountTypeCodeDTO);
        when(contributionBankAccountDTO.getBankAccountStatus()).thenReturn(bankAccountStatusDTO);
        when(bankAccountTypeCodeDTO.getCodeName()).thenReturn("Checking");
        when(bankAccountStatusDTO.getCode()).thenReturn("Active");
    }

    @Test
    void testGetEmployerBankDetailDTO() {
        EmployerBankDetailDTO result = EmployerContributionHelper.getEmployerBankDetailDTO(bankAccountDTO, employerBankDetailsResponseDTO);
        assertNotNull(result);
        assertEquals(1, result.getContributionBankAccounts().size());
    }

    @Test
    void testCreateContributionBankAccountDTO() {
        ContributionBankAccountDTO result = EmployerContributionHelper.createContributionBankAccountDTO(bankAccountDTO, employerBankDetailsResponseDTO);
        assertNotNull(result);
        assertEquals("Test Bank", result.getBankName());
        assertEquals("Test Nickname", result.getBankAccountNickName());
    }

    @Test
    void testCreateBankAccountIdentifierDTO() {
        BankAccountIdentifierDTO result = EmployerContributionHelper.createBankAccountIdentifierDTO(bankAccountDTO);
        assertNotNull(result);
        assertEquals("123456789", result.getBankAccountNumber());
        assertEquals("987654321", result.getBankRoutingNumber());
    }

    @Test
    void testCreateBankAccountTypeCodeDTO() {
        BankAccountTypeCodeDTO result = EmployerContributionHelper.createBankAccountTypeCodeDTO(bankAccountDTO, employerBankDetailsResponseDTO);
        assertNotNull(result);
        assertEquals("Checking", result.getCode());
        assertEquals("Checking", result.getCodeName());
    }

    @Test
    void testCreateBankAccountStatusDTO() {
        BankAccountStatusDTO result = EmployerContributionHelper.createBankAccountStatusDTO(bankAccountDTO, employerBankDetailsResponseDTO);
        assertNotNull(result);
        assertEquals("Active", result.getCodeName());
        assertEquals("Active", result.getCode());
    }
}
