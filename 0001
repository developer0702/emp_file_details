import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.http.HttpStatus;
import reactor.core.publisher.Mono;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class BankAccountClientTest {

    @Mock
    private WebClient employerWebClient;

    @Mock
    private WebClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private WebClient.RequestBodySpec requestBodySpec;

    @Mock
    private WebClient.RequestHeadersSpec requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private BankAccountClient bankAccountClient;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCallUpdateBankAccountApi_Success() {
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountNumber("987654321");
        bankAccountDTO.setAccountType("Savings");

        BankAccountResponseDTO responseDTO = new BankAccountResponseDTO();
        responseDTO.setStatus("Success");

        // Mock the WebClient chain
        when(employerWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString(), any(), any())).thenReturn(requestBodySpec);
        when(requestBodySpec.body(any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.just(responseDTO));

        // Call the method under test
        Mono<BankAccountResponseDTO> result = bankAccountClient.callUpdateBankAccountApi(bankAccountDTO, "EMP123", 1L);

        // Verify the result
        assertNotNull(result);
        assertEquals("Success", result.block().getStatus());
    }

    @Test
    void testCallUpdateBankAccountApi_NotFound() {
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountNumber("987654321");
        bankAccountDTO.setAccountType("Savings");

        // Simulate a 404 Not Found error
        WebClientResponseException notFoundException = WebClientResponseException.create(
                HttpStatus.NOT_FOUND.value(),
                "Not Found",
                null, // headers
                null, // response body as byte array
                null  // charset
        );

        // Mock the WebClient chain
        when(employerWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString(), any(), any())).thenReturn(requestBodySpec);
        when(requestBodySpec.body(any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
                .thenReturn(Mono.error(notFoundException));

        // Call the method under test
        Mono<BankAccountResponseDTO> result = bankAccountClient.callUpdateBankAccountApi(bankAccountDTO, "EMP123", 1L);

        // Verify that the result is an empty Mono
        assertNotNull(result);
        assertNull(result.block()); // block() resolves the Mono and returns null for empty Mono
    }

    @Test
    void testCallGetBankAccountInfoApi_Success() {
        BankAccountResponse response = new BankAccountResponse();
        response.setStatus("Success");

        // Mock the WebClient chain
        when(employerWebClient.get()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString(), any(), any())).thenReturn(requestBodySpec);
        when(requestBodySpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.just(response));

        // Call the method under test
        Mono<BankAccountResponse> result = bankAccountClient.callGetBankAccountInfoApi("EMP123", 1L);

        // Verify the result
        assertNotNull(result);
        assertEquals("Success", result.block().getStatus());
    }

    @Test
    void testCallGetBankAccountInfoApi_NotFound() {
        // Simulate a 404 Not Found error
        WebClientResponseException notFoundException = WebClientResponseException.create(
                HttpStatus.NOT_FOUND.value(),
                "Not Found",
                null, // headers
                null, // response body as byte array
                null  // charset
        );

        // Mock the WebClient chain
        when(employerWebClient.get()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString(), any(), any())).thenReturn(requestBodySpec);
        when(requestBodySpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.error(notFoundException));

        // Call the method under test
        Mono<BankAccountResponse> result = bankAccountClient.callGetBankAccountInfoApi("EMP123", 1L);

        // Verify that the result is an empty Mono
        assertNotNull(result);
        assertNull(result.block()); // block() resolves the Mono and returns null for empty Mono
    }
}
