package com.optum.ftps.ob.core.employer.details.resolver;

import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountDTO;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponse;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponseDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class BankAccountClientTest {

    @Mock
    private WebClient employerWebClient;

    @Mock
    private WebClient.RequestHeadersUriSpec requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private BankAccountClient bankAccountClient;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateBankAccountResponse_Success() {
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountNumber("987654321");
        bankAccountDTO.setAccountType("Savings");

        BankAccountResponseDTO responseDTO = new BankAccountResponseDTO();
        responseDTO.setStatus("Success");

        when(employerWebClient.post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.body(any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.just(responseDTO));

        BankAccountResponseDTO result = bankAccountClient.updateBankAccountResponse(bankAccountDTO, "EMP123", 1L);

        assertNotNull(result);
        assertEquals("Success", result.getStatus());
    }

    @Test
    void testUpdateBankAccountResponse_NotFound() {
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountNumber("987654321");
        bankAccountDTO.setAccountType("Savings");

        when(employerWebClient.post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.body(any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
                .thenReturn(Mono.error(new WebClientResponseException.NotFound("Not Found", 404, "Not Found", null, null, null)));

        BankAccountResponseDTO result = bankAccountClient.updateBankAccountResponse(bankAccountDTO, "EMP123", 1L);

        assertNull(result);
    }

    @Test
    void testGetBankAccountInfoFromBankService_Success() {
        BankAccountResponse response = new BankAccountResponse();
        response.setStatus("Success");

        when(employerWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.just(response));

        BankAccountResponse result = bankAccountClient.getBankAccountInfoFromBankService("EMP123", 1L);

        assertNotNull(result);
        assertEquals("Success", result.getStatus());
    }

    @Test
    void testGetBankAccountInfoFromBankService_NotFound() {
        when(employerWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.error(new WebClientResponseException.NotFound("Not Found", 404, "Not Found", null, null, null)));

        BankAccountResponse result = bankAccountClient.getBankAccountInfoFromBankService("EMP123", 1L);

        assertNull(result);
    }

    @Test
    void testCallUpdateBankAccountApi_Success() {
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setBankName("Test Bank");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountNumber("987654321");
        bankAccountDTO.setAccountType("Savings");

        BankAccountResponseDTO responseDTO = new BankAccountResponseDTO();
        responseDTO.setStatus("Success");

        when(employerWebClient.post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.body(any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.just(responseDTO));

        Mono<BankAccountResponseDTO> result = bankAccountClient.callUpdateBankAccountApi(bankAccountDTO, "EMP123", 1L);

        assertNotNull(result);
        assertEquals("Success", result.block().getStatus());
    }

    @Test
    void testCallGetBankAccountInfoApi_Success() {
        BankAccountResponse response = new BankAccountResponse();
        response.setStatus("Success");

        when(employerWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString(), any(), any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.just(response));

        Mono<BankAccountResponse> result = bankAccountClient.callGetBankAccountInfoApi("EMP123", 1L);

        assertNotNull(result);
        assertEquals("Success", result.block().getStatus());
    }
}
