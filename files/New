package com.optum.ftps.ob.core.employer.details.exceptions.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

class ErrorResponseTest {

    @Test
    void testErrorResponse() {
        // Create an instance of ErrorResponse
        ErrorResponse errorResponse = new ErrorResponse();

        // Create an instance of ErrorItem
        ErrorItem errorItem = ErrorItem.builder()
                .statusCode("404")
                .severity("ERROR")
                .statusDescription("Not Found")
                .build();

        // Add the ErrorItem to the ErrorResponse
        ErrorResponse response = errorResponse.addItem(errorItem);

        // Verify that the response is the same instance as errorResponse
        assertSame(errorResponse, response);

        // Retrieve the list of errors from the ErrorResponse
        List<ErrorItem> errors = errorResponse.getErrors();

        // Verify that the list contains the added ErrorItem
        assertEquals(1, errors.size());
        assertSame(errorItem, errors.get(0));
    }

    @Test
    void testErrorItem() {
        // Create an instance of ErrorItem using the builder
        ErrorItem errorItem = ErrorItem.builder()
                .statusCode("500")
                .severity("CRITICAL")
                .statusDescription("Internal Server Error")
                .build();

        // Verify the properties of the ErrorItem
        assertEquals("500", errorItem.getStatusCode());
        assertEquals("CRITICAL", errorItem.getSeverity());
        assertEquals("Internal Server Error", errorItem.getStatusDescription());

        // Modify the properties using the setter methods
        errorItem.setStatusCode("400");
        errorItem.setSeverity("WARNING");
        errorItem.setStatusDescription("Bad Request");

        // Verify the modified properties
        assertEquals("400", errorItem.getStatusCode());
        assertEquals("WARNING", errorItem.getSeverity());
        assertEquals("Bad Request", errorItem.getStatusDescription());
    }

    @Test
    void testErrorResponseToStringAndEqualsAndHashCode() {
        // Create two instances of ErrorResponse with the same ErrorItem
        ErrorItem errorItem = ErrorItem.builder()
                .statusCode("404")
                .severity("ERROR")
                .statusDescription("Not Found")
                .build();

        ErrorResponse errorResponse1 = new ErrorResponse().addItem(errorItem);
        ErrorResponse errorResponse2 = new ErrorResponse().addItem(errorItem);

        // Verify toString method
        assertNotNull(errorResponse1.toString());
        assertNotNull(errorResponse2.toString());

        // Verify equals method
        assertEquals(errorResponse1, errorResponse2);

        // Verify hashCode method
        assertEquals(errorResponse1.hashCode(), errorResponse2.hashCode());
    }

    @Test
    void testErrorItemToStringAndEqualsAndHashCode() {
        // Create two instances of ErrorItem with the same properties
        ErrorItem errorItem1 = ErrorItem.builder()
                .statusCode("404")
                .severity("ERROR")
                .statusDescription("Not Found")
                .build();

        ErrorItem errorItem2 = ErrorItem.builder()
                .statusCode("404")
                .severity("ERROR")
                .statusDescription("Not Found")
                .build();

        // Verify toString method
        assertNotNull(errorItem1.toString());
        assertNotNull(errorItem2.toString());

        // Verify equals method
        assertEquals(errorItem1, errorItem2);

        // Verify hashCode method
        assertEquals(errorItem1.hashCode(), errorItem2.hashCode());
    }
}
