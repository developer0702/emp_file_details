package com.optum.ftps.ob.core.employer.details.resolver;

import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountDTO;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponse;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponseDTO;
import com.optum.ftps.ob.core.employer.details.exceptions.ClientException;
import com.optum.ftps.ob.core.employer.details.exceptions.ServiceException;
import com.optum.ftps.ob.core.employer.details.exceptions.model.ErrorItem;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import reactor.core.publisher.Mono;

import java.util.List;

@Service
@Slf4j
public class BankAccountHelper {
    private static final String ADD_BANK_ACCOUNT_API = "/employer/{employerGroupId}/bank-account";
    private static final String GET_SPECIFIC_BANK_ACCOUNT_API =
            "/employer/{employerGroupId}/bank-account/{id}";

    private static final String UPDATE_SPECIFIC_BANK_ACCOUNT_API =
            "/employer/{employerGroupId}/bank-account/{id}";
    private final WebClient employerWebClient;

    public BankAccountHelper(@Qualifier("employerWebClient") WebClient employerWebClient) {
        this.employerWebClient = employerWebClient;
    }


    public BankAccountResponseDTO updateBankAccountResponse(
            BankAccountDTO bankAccountDTO, String employerGroupId, Long id) {

        return callUpdateBankAccountApi(bankAccountDTO, employerGroupId, id).block();
    }
    public Mono<BankAccountResponseDTO> callUpdateBankAccountApi(
            BankAccountDTO bankAccountDTO, String employerGroupId, Long id) {
        return employerWebClient
                .post()
                .uri(
                        uriBuilder ->
                                uriBuilder
                                        .path(UPDATE_SPECIFIC_BANK_ACCOUNT_API)
                                        .build(employerGroupId, id))
                .body(Mono.just(bankAccountDTO), BankAccountDTO.class)
                .retrieve()
                .onStatus(HttpStatusCode::is4xxClientError, this::handle4xxError)
                .onStatus(HttpStatusCode::is5xxServerError, this::handle5xxError)
                .bodyToMono(BankAccountResponseDTO.class)
                .onErrorResume(
                        WebClientResponseException.NotFound.class,
                        e -> {
                            log.error("404 Not Found 1: {}", e.getMessage());
                            return Mono.error(e);
                        });
    }

    public BankAccountResponseDTO addBankAccountResponse(
            BankAccountDTO bankAccountDTO, String employerGroupId) {
        return callAddBankAccountApi(bankAccountDTO, employerGroupId).block();
    }

    public Mono<BankAccountResponseDTO> callAddBankAccountApi(
            BankAccountDTO bankAccountDTO, String employerGroupId) {
        return employerWebClient
                .post()
                .uri(uriBuilder -> uriBuilder.path(ADD_BANK_ACCOUNT_API).build(employerGroupId))
                .bodyValue(bankAccountDTO)
                .retrieve()
                .onStatus(HttpStatusCode::is4xxClientError, this::handle4xxError)
                .onStatus(HttpStatusCode::is5xxServerError, this::handle5xxError)
                .bodyToMono(BankAccountResponseDTO.class)
                .onErrorResume(
                        WebClientResponseException.NotFound.class,
                        e -> {
                            log.error("404 Not Found 11: {}", e.getMessage());
                            return Mono.empty();
                        });
    }

    public BankAccountResponse getBankAccountInfoFromBankService(String employerGroupId, Long id) {
        return callGetBankAccountInfoApi(employerGroupId, id).block();
    }

    public Mono<BankAccountResponse> callGetBankAccountInfoApi(String employerGroupId, Long id) {

        return employerWebClient
                .get()
                .uri(
                        uriBuilder ->
                                uriBuilder
                                        .path(GET_SPECIFIC_BANK_ACCOUNT_API)
                                        .build(employerGroupId, id))
                .retrieve()
                .onStatus(HttpStatusCode::is4xxClientError, this::handle4xxError)
                .onStatus(HttpStatusCode::is5xxServerError, this::handle5xxError)
                .bodyToMono(BankAccountResponse.class)
                .onErrorResume(
                        WebClientResponseException.NotFound.class,
                        e -> {
                            log.error("404 Not Found: {}", e.getMessage());
                            return Mono.empty();
                        });
    }

     Mono<Throwable> handle4xxError(ClientResponse clientResponse) {
        ErrorItem errorItem =
                ErrorItem.builder()
                        .statusCode(clientResponse.statusCode().toString().split(" ")[0])
                        .severity("ERR")
                        .statusDescription(clientResponse.statusCode().toString().split(" ")[1])
                        .build();
        log.error("4xx Client Error: {}", clientResponse.statusCode());
        return Mono.error(new ClientException(List.of(errorItem)));
    }

     Mono<Throwable> handle5xxError(ClientResponse clientResponse) {
        ErrorItem errorItem =
                ErrorItem.builder()
                        .statusCode(clientResponse.statusCode().toString().split(" ")[0])
                        .severity("ERR")
                        .statusDescription(clientResponse.statusCode().toString().split(" ")[1])
                        .build();
        log.error("5xx Client Error: {}", clientResponse.statusCode());
        return Mono.error(new ServiceException(List.of(errorItem)));
    }
}

====================test==========================
package com.optum.ftps.ob.core.employer.details.resolver;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

import com.optum.ftps.ob.core.employer.details.constants.BankAccountConstants;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountDTO;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponse;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponseDTO;
import com.optum.ftps.ob.core.employer.details.exceptions.ClientException;
import com.optum.ftps.ob.core.employer.details.exceptions.ServiceException;
import com.optum.ftps.ob.core.employer.details.exceptions.model.ErrorItem;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatusCode;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriBuilder;
import org.springframework.web.reactive.function.client.ClientResponse;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.net.URI;
import java.util.List;
import java.util.function.Function;

 class BankAccountHelperTest {

    @Mock WebClient.RequestBodySpec requestBodySpec;
    @Mock private WebClient employerWebClient;
    @Mock private WebClient.RequestBodyUriSpec requestBodyUriSpec;
    @Mock private WebClient.RequestHeadersSpec requestHeadersSpec;
    @Mock private WebClient.ResponseSpec responseSpec;
    @Mock private WebClient.RequestHeadersUriSpec requestHeadersUriSpec;
    @Mock private ClientResponse clientResponse;
    @InjectMocks private BankAccountHelper bankAccountHelper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(employerWebClient.post()).thenReturn(requestBodyUriSpec);
        when(employerWebClient.get()).thenReturn(requestHeadersUriSpec);

    }


    @Test
     void testSaveBankAccount() {
        var bankAccountInput = new BankAccountDTO();
        var bankAccountResponseDTO = new BankAccountResponseDTO();
        bankAccountResponseDTO.setData(1L);
        bankAccountResponseDTO.setStatus(BankAccountConstants.SUCCESS);

        when(requestBodyUriSpec.uri((Function<UriBuilder, URI>) any()))
                .thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.bodyValue(any(BankAccountDTO.class)))
                .thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
                .thenReturn(Mono.just(bankAccountResponseDTO));
        BankAccountResponseDTO response =
                bankAccountHelper.addBankAccountResponse(bankAccountInput, "123");
        assertEquals(1L, response.getData());
        assertEquals(BankAccountConstants.SUCCESS, response.getStatus());
    }

    @Test
     void testGetBankAccountInfoFromBankService_NotFound() {

        when(requestHeadersUriSpec.uri((Function<UriBuilder, URI>) any()))
                .thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(
                        Mono.error(
                                new ClientException(
                                        List.of(
                                                ErrorItem.builder()
                                                        .statusCode("401")
                                                        .severity("ERR")
                                                        .statusDescription("Unauthorized")
                                                        .build()))));
        Mono<BankAccountResponse> responseMono =
                bankAccountHelper.callGetBankAccountInfoApi("123", 1L);
        assertThrows(ClientException.class, responseMono::block);
    }

    @Test
     void testGetBankAccountInfoFromBankService() {

        var bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setId(1L);
        bankAccountDTO.setBankName("Bank of America");
        bankAccountDTO.setAccountNumber("123456789");
        bankAccountDTO.setRoutingNumber("123456789");
        bankAccountDTO.setAccountType("Checking");
        bankAccountDTO.setNickName("Bank of America");
        var bankAccountResponse = new BankAccountResponse();
        bankAccountResponse.setData(bankAccountDTO);
        bankAccountResponse.setStatus("Success");
        when(requestHeadersUriSpec.uri((Function<UriBuilder, URI>) any()))
                .thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.just(bankAccountResponse));

        BankAccountResponse response =
                bankAccountHelper.getBankAccountInfoFromBankService("123", 1L);

        assertEquals(1L, response.getData().getId());
    }

    @Test
    void testUpdateBankAccountResponse_Success() {
       // Arrange
       BankAccountDTO bankAccountInput = new BankAccountDTO();
       bankAccountInput.setBankName("Test Bank");
       bankAccountInput.setRoutingNumber("123456789");
       bankAccountInput.setAccountNumber("987654321");
       bankAccountInput.setAccountType("Savings");

       BankAccountResponseDTO bankAccountResponseDTO = new BankAccountResponseDTO();
       bankAccountResponseDTO.setData(1L);
       bankAccountResponseDTO.setStatus("SUCCESS");

       when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
       when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.just(bankAccountResponseDTO));

       // Act
       BankAccountResponseDTO response = bankAccountHelper.updateBankAccountResponse(bankAccountInput, "abc123", 1L);

       // Assert
       assertNotNull(response);
       assertEquals(1L, response.getData());
       assertEquals("SUCCESS", response.getStatus());
    }

    @Test
    void testUpdateBankAccountResponse_NullInput() {
       // Arrange
       when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
       when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.empty());

       // Act & Assert
       assertThrows(NullPointerException.class, () -> {
          bankAccountHelper.updateBankAccountResponse(null, "abc123", 1L);
       });
    }

    @Test
    void testGetBankAccountInfoFromBankService_Success() {
       // Arrange
       BankAccountResponse bankAccountResponse = new BankAccountResponse();
       BankAccountDTO bankAccountDTO = new BankAccountDTO();
       bankAccountDTO.setId(1L);
       bankAccountResponse.setData(bankAccountDTO);

       when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.just(bankAccountResponse));

       // Act
       BankAccountResponse response = bankAccountHelper.getBankAccountInfoFromBankService("abc123", 1L);

       // Assert
       assertNotNull(response);
       assertEquals(1L, response.getData().getId());
    }

    @Test
    void testGetBankAccountInfoFromBankService_NotFoundInfo() {
       // Arrange
       when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponse.class))
               .thenReturn(Mono.error(new  ClientException(
                       List.of(
                               ErrorItem.builder()
                                       .statusCode("404")
                                       .statusDescription("Not Found")
                                       .severity("ERR")
                                       .build()))));
       // Act & Assert
       assertThrows(ClientException.class, () -> {
          bankAccountHelper.getBankAccountInfoFromBankService("abc123", 1L);
       });
    }

    @Test
    void testCallUpdateBankAccountApi_ClientError() {
       // Arrange
       BankAccountDTO bankAccountInput = new BankAccountDTO();

       when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
       when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
               .thenReturn(Mono.error(new ClientException(List.of(ErrorItem.builder()
                       .statusCode("400")
                       .statusDescription("Bad Request")
                       .severity("ERR")
                       .build()))));

       // Act & Assert
       assertThrows(ClientException.class, () -> {
          bankAccountHelper.callUpdateBankAccountApi(bankAccountInput, "123", 1L).block();
       });
    }

    @Test
    void testCallUpdateBankAccountApi_ServerError() {
       // Arrange
       BankAccountDTO bankAccountInput = new BankAccountDTO();

       when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
       when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
               .thenReturn(Mono.error(new ServiceException(List.of(ErrorItem.builder()
                       .statusCode("500")
                       .statusDescription("Internal Server Error")
                       .severity("ERR")
                       .build()))));

       // Act & Assert
       assertThrows(ServiceException.class, () -> {
          bankAccountHelper.callUpdateBankAccountApi(bankAccountInput, "123", 1L).block();
       });
    }

    @Test
    void testCallGetBankAccountInfo_ClientError() {
       // Arrange
       when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponse.class))
               .thenReturn(Mono.error(new ClientException(List.of(ErrorItem.builder()
                       .statusCode("400")
                       .statusDescription("Bad Request")
                       .severity("ERR")
                       .build()))));

       // Act & Assert
       assertThrows(ClientException.class, () -> {
          bankAccountHelper.callGetBankAccountInfoApi("123", 1L).block();
       });
    }

    @Test
    void testCallGetBankAccountInfo_ServerError() {
       // Arrange
       when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponse.class))
               .thenReturn(Mono.error(new ServiceException(List.of(ErrorItem.builder()
                       .statusCode("500")
                       .statusDescription("Internal Server Error")
                       .severity("ERR")
                       .build()))));

       // Act & Assert
       assertThrows(ServiceException.class, () -> {
          bankAccountHelper.callGetBankAccountInfoApi("123", 1L).block();
       });
    }

    @Test
    void testHandle4xxError() {
       // Arrange
       when(clientResponse.statusCode()).thenReturn(HttpStatusCode.valueOf(400));

       // Act
       Mono<Throwable> result = bankAccountHelper.handle4xxError(clientResponse);

       // Assert
       StepVerifier.create(result)
               .expectErrorMatches(throwable -> throwable instanceof ClientException &&
                       ((ClientException) throwable).getErrors().get(0).getStatusCode().equals("400"))
               .verify();
    }

    @Test
    void testHandle5xxError() {
       // Arrange
       when(clientResponse.statusCode()).thenReturn(HttpStatusCode.valueOf(500));

       // Act
       Mono<Throwable> result = bankAccountHelper.handle5xxError(clientResponse);

       // Assert
       StepVerifier.create(result)
               .expectErrorMatches(throwable -> throwable instanceof ServiceException &&
                       ((ServiceException) throwable).getErrors().get(0).getStatusCode().equals("500"))
               .verify();
    }

    @Test
    void testCallUpdateBankAccountApi_EmptyResponse() {
       // Arrange
       BankAccountDTO bankAccountInput = new BankAccountDTO();

       when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
       when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.empty());

       // Act & Assert
       StepVerifier.create(bankAccountHelper.callUpdateBankAccountApi(bankAccountInput, "123", 1L))
               .expectComplete()
               .verify();
    }

    @Test
    void testCallGetBankAccountInfo_EmptyResponse() {
       // Arrange
       when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
       when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
       when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
       when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.empty());

       // Act & Assert
       StepVerifier.create(bankAccountHelper.callGetBankAccountInfoApi("123", 1L))
               .expectComplete()
               .verify();
    }
}
