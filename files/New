package com.optum.ftps.ob.core.employer.details.validator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.optum.ftps.ob.core.employer.details.exceptions.ValidationException;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountIdentifier;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountStatus;
import com.optum.ftps.ob.core.employer.details.model.v1.BankAccountTypeCode;
import com.optum.ftps.ob.core.employer.details.model.v1.ContributionBankAccount;
import com.optum.ftps.ob.core.employer.details.model.v1.EmployerBankDetail;
import com.optum.ftps.ob.core.employer.details.model.v1.UpdateEmpBankDetailsRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;

import java.util.Collections;
import java.util.Set;

public class EmployerBankDetailsValidatorTest {

    @InjectMocks private EmployerBankDetailsValidator validator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void validateEmployerBankDetails_validRequest_noErrors() throws ValidationException {
        var request = createValidRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertTrue(errors.isEmpty());
    }

    @Test
    void validateEmployerBankDetails_invalidFieldFormats_throwsValidationException() {
        var request = createInvalidFormatRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertEquals(1, errors.size());
    }

    @Test
    void validateEmployerBankDetails_missingRequiredFields_throwsValidationException() {
        var request = createMissingRequiredFieldsRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertEquals(1, errors.size());
    }

    @Test
    void validateEmployerBankDetails_invalidContributionAccountsSize_throwsValidationException() {
        var request = createInvalidContributionAccountsSizeRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertEquals(1, errors.size());
    }

    @Test
    void validateEmployerBankDetails_invalidBankAccountOperation_throwsValidationException() {
        var request = createInvalidBankAccountOperationRequest();
        Set<Integer> errors = validator.validateEmployerBankDetails(request);
        assertEquals(1, errors.size());
    }

    private UpdateEmpBankDetailsRequest createValidRequest() {
        var request = new UpdateEmpBankDetailsRequest();
        request.setRequestUserId("validUserId");
        request.setSourceSystemId("validSourceId");
        request.setRequestId("validRequestId");
        request.setEmployerBankDetail(createValidEmployerBankDetail());
        return request;
    }

    private UpdateEmpBankDetailsRequest createInvalidFormatRequest() {
        var request = new UpdateEmpBankDetailsRequest();
        request.setRequestUserId("invalidUserIdWithTooManyCharacters");
        request.setSourceSystemId("invalidSourceIdWithTooManyCharacters");
        request.setRequestId("invalidRequestIdWithTooManyCharacters");
        request.setEmployerBankDetail(createInvalidEmployerBankDetail());
        return request;
    }

    private UpdateEmpBankDetailsRequest createMissingRequiredFieldsRequest() {
        var request = new UpdateEmpBankDetailsRequest();
        request.setRequestUserId("");
        request.setSourceSystemId("");
        request.setRequestId("");
        request.setEmployerBankDetail(new EmployerBankDetail());
        return request;
    }

    private UpdateEmpBankDetailsRequest createInvalidContributionAccountsSizeRequest() {
        var request = new UpdateEmpBankDetailsRequest();
        request.setRequestUserId("validUserId");
        request.setSourceSystemId("validSourceId");
        request.setRequestId("validRequestId");
        var detail = new EmployerBankDetail();
        detail.setEmployerGroupId("validGroupId");
        detail.setContributionBankAccounts(Collections.nCopies(21, createValidContributionBankAccount()));
        request.setEmployerBankDetail(detail);
        return request;
    }

    private UpdateEmpBankDetailsRequest createInvalidBankAccountOperationRequest() {
        var request = new UpdateEmpBankDetailsRequest();
        request.setRequestUserId("validUserId");
        request.setSourceSystemId("validSourceId");
        request.setRequestId("validRequestId");
        var detail = new EmployerBankDetail();
        detail.setEmployerGroupId("validGroupId");
        var account = createValidContributionBankAccount();
        account.setBankAccountOperation("INVALID");
        detail.setContributionBankAccounts(Collections.singletonList(account));
        request.setEmployerBankDetail(detail);
        return request;
    }

    private EmployerBankDetail createValidEmployerBankDetail() {
        var detail = new EmployerBankDetail();
        detail.setEmployerGroupId("validGroupId");
        detail.setContributionBankAccounts(
                Collections.singletonList(createValidContributionBankAccount()));
        return detail;
    }

    private EmployerBankDetail createInvalidEmployerBankDetail() {
        var detail = new EmployerBankDetail();
        detail.setEmployerGroupId("invalidGroupIdWithTooManyCharacters");
        detail.setContributionBankAccounts(
                Collections.singletonList(createInvalidContributionBankAccount()));
        return detail;
    }

    private ContributionBankAccount createValidContributionBankAccount() {
        var account = new ContributionBankAccount();
        account.setBankAccountIdentifier(
                new BankAccountIdentifier("123456789", "12345678901234567"));
        account.setBankName("validBankName");
        account.setBankAccountTypeCode(new BankAccountTypeCode("S", "Savings"));
        account.setBankAccountStatus(new BankAccountStatus("A", "Active"));
        account.setBankAccountOperation("ADD");
        return account;
    }

    private ContributionBankAccount createInvalidContributionBankAccount() {
        var account = new ContributionBankAccount();
        account.setBankAccountIdentifier(
                new BankAccountIdentifier("invalidRoutingNumber", "invalidAccountNumber"));
        account.setBankName("invalidBankNameWithTooManyCharacters");
        account.setBankAccountTypeCode(new BankAccountTypeCode("X", "InvalidType"));
        account.setBankAccountStatus(new BankAccountStatus("X", "InvalidStatus"));
        account.setBankAccountOperation("INVALID");
        return account;
    }
}
