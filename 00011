
package com.optum.ftps.ob.core.employer.details.resolver;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountDTO;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponse;
import com.optum.ftps.ob.core.employer.details.dto.bankaccount.BankAccountResponseDTO;
import com.optum.ftps.ob.core.employer.details.exceptions.ClientException;
import com.optum.ftps.ob.core.employer.details.exceptions.ServiceException;
import com.optum.ftps.ob.core.employer.details.exceptions.model.ErrorItem;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatusCode;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

class BankAccountClientTest {

    @Mock private WebClient employerWebClient;
    @Mock private WebClient.RequestBodyUriSpec requestBodyUriSpec;
    @Mock private WebClient.RequestHeadersUriSpec requestHeadersUriSpec;
    @Mock private WebClient.RequestHeadersSpec requestHeadersSpec;
    @Mock private WebClient.ResponseSpec responseSpec;
    @Mock private ClientResponse clientResponse;

    @InjectMocks private BankAccountClient bankAccountClient;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(employerWebClient.post()).thenReturn(requestBodyUriSpec);
        when(employerWebClient.get()).thenReturn(requestHeadersUriSpec);
    }

    @Test
    void testUpdateBankAccountResponse_Success() {
        // Arrange
        BankAccountDTO bankAccountInput = new BankAccountDTO();
        bankAccountInput.setBankName("Test Bank");
        bankAccountInput.setRoutingNumber("123456789");
        bankAccountInput.setAccountNumber("987654321");
        bankAccountInput.setAccountType("Savings");

        BankAccountResponseDTO bankAccountResponseDTO = BankAccountResponseDTO.builder()
                .data(1L)
                .status("SUCCESS")
                .build();

        when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.just(bankAccountResponseDTO));

        // Act
        BankAccountResponseDTO response = bankAccountClient.updateBankAccountResponse(bankAccountInput, "abc123", 1L);

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getData());
        assertEquals("SUCCESS", response.getStatus());
    }

    @Test
    void testUpdateBankAccountResponse_NullInput() {
        // Arrange
        when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.empty());

        // Act & Assert
        assertThrows(NullPointerException.class, () -> {
            bankAccountClient.updateBankAccountResponse(null, "abc123", 1L);
        });
    }

    @Test
    void testGetBankAccountInfoFromBankService_Success() {
        // Arrange
        BankAccountResponse bankAccountResponse = new BankAccountResponse();
        BankAccountDTO bankAccountDTO = new BankAccountDTO();
        bankAccountDTO.setId(1L);
        bankAccountResponse.setData(bankAccountDTO);

        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.just(bankAccountResponse));

        // Act
        BankAccountResponse response = bankAccountClient.getBankAccountInfoFromBankService("abc123", 1L);

        // Assert
        assertNotNull(response);
        assertEquals(1L, response.getData().getId());
    }

    @Test
    void testGetBankAccountInfoFromBankService_NotFound() {
        // Arrange
        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.error(new WebClientResponseException.NotFound("Not Found", 404, "Not Found", null, null, null)));

        // Act & Assert
        assertThrows(ClientException.class, () -> {
            bankAccountClient.getBankAccountInfoFromBankService("abc123", 1L);
        });
    }

    @Test
    void testCallUpdateBankAccountApi_ClientError() {
        // Arrange
        BankAccountDTO bankAccountInput = new BankAccountDTO();

        when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
                .thenReturn(Mono.error(new ClientException(List.of(ErrorItem.builder()
                        .statusCode("400")
                        .statusDescription("Bad Request")
                        .severity("ERR")
                        .build()))));

        // Act & Assert
        assertThrows(ClientException.class, () -> {
            bankAccountClient.callUpdateBankAccountApi(bankAccountInput, "123", 1L).block();
        });
    }

    @Test
    void testCallUpdateBankAccountApi_ServerError() {
        // Arrange
        BankAccountDTO bankAccountInput = new BankAccountDTO();

        when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class))
                .thenReturn(Mono.error(new ServiceException(List.of(ErrorItem.builder()
                        .statusCode("500")
                        .statusDescription("Internal Server Error")
                        .severity("ERR")
                        .build()))));

        // Act & Assert
        assertThrows(ServiceException.class, () -> {
            bankAccountClient.callUpdateBankAccountApi(bankAccountInput, "123", 1L).block();
        });
    }

    @Test
    void testCallGetBankAccountInfo_ClientError() {
        // Arrange
        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.error(new ClientException(List.of(ErrorItem.builder()
                        .statusCode("400")
                        .statusDescription("Bad Request")
                        .severity("ERR")
                        .build()))));

        // Act & Assert
        assertThrows(ClientException.class, () -> {
            bankAccountClient.callGetBankAccountInfo("123", 1L).block();
        });
    }

    @Test
    void testCallGetBankAccountInfo_ServerError() {
        // Arrange
        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class))
                .thenReturn(Mono.error(new ServiceException(List.of(ErrorItem.builder()
                        .statusCode("500")
                        .statusDescription("Internal Server Error")
                        .severity("ERR")
                        .build()))));

        // Act & Assert
        assertThrows(ServiceException.class, () -> {
            bankAccountClient.callGetBankAccountInfo("123", 1L).block();
        });
    }

    @Test
    void testHandle4xxError() {
        // Arrange
        when(clientResponse.statusCode()).thenReturn(HttpStatusCode.valueOf(400));

        // Act
        Mono<Throwable> result = bankAccountClient.handle4xxError(clientResponse);

        // Assert
        StepVerifier.create(result)
                .expectErrorMatches(throwable -> throwable instanceof ClientException &&
                        ((ClientException) throwable).getErrors().get(0).getStatusCode().equals("400"))
                .verify();
    }

    @Test
    void testHandle5xxError() {
        // Arrange
        when(clientResponse.statusCode()).thenReturn(HttpStatusCode.valueOf(500));

        // Act
        Mono<Throwable> result = bankAccountClient.handle5xxError(clientResponse);

        // Assert
        StepVerifier.create(result)
                .expectErrorMatches(throwable -> throwable instanceof ServiceException &&
                        ((ServiceException) throwable).getErrors().get(0).getStatusCode().equals("500"))
                .verify();
    }

    @Test
    void testCallUpdateBankAccountApi_EmptyResponse() {
        // Arrange
        BankAccountDTO bankAccountInput = new BankAccountDTO();

        when(requestBodyUriSpec.uri(any(Function.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.body(any(Mono.class), eq(BankAccountDTO.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponseDTO.class)).thenReturn(Mono.empty());

        // Act & Assert
        StepVerifier.create(bankAccountClient.callUpdateBankAccountApi(bankAccountInput, "123", 1L))
                .expectComplete()
                .verify();
    }

    @Test
    void testCallGetBankAccountInfo_EmptyResponse() {
        // Arrange
        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.onStatus(any(), any())).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(BankAccountResponse.class)).thenReturn(Mono.empty());

        // Act & Assert
        StepVerifier.create(bankAccountClient.callGetBankAccountInfo("123", 1L))
                .expectComplete()
                .verify();
    }
}
